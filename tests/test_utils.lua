-- Tests for vimania utility functions using plenary.test_harness

local utils = require('vimania.utils')

describe('utils', function()
  describe('is_url', function()
    it('should identify valid URLs', function()
      assert.is_true(utils.is_url('https://www.google.com'))
      assert.is_true(utils.is_url('http://example.com'))
      assert.is_true(utils.is_url('https://github.com/user/repo'))
    end)
    
    it('should reject invalid URLs', function()
      assert.is_false(utils.is_url('not a url'))
      assert.is_false(utils.is_url('file://local/path'))
      assert.is_false(utils.is_url(''))
      assert.is_false(utils.is_url(nil))
    end)
  end)
  
  describe('parse_url', function()
    it('should parse valid URLs correctly', function()
      local parsed = utils.parse_url('https://example.com/path')
      assert.are.equal('https', parsed.scheme)
      assert.are.equal('example.com', parsed.host)
      assert.are.equal('/path', parsed.path)
    end)
    
    it('should return nil for invalid URLs', function()
      assert.is_nil(utils.parse_url('not a url'))
      assert.is_nil(utils.parse_url(''))
    end)
  end)
  
  describe('is_local_network', function()
    it('should identify localhost', function()
      assert.is_true(utils.is_local_network('localhost'))
      assert.is_true(utils.is_local_network('127.0.0.1'))
      assert.is_true(utils.is_local_network('::1'))
    end)
    
    it('should identify private IP ranges', function()
      assert.is_true(utils.is_local_network('192.168.1.1'))
      assert.is_true(utils.is_local_network('10.0.0.1'))
      assert.is_true(utils.is_local_network('172.16.0.1'))
    end)
    
    it('should allow public IPs', function()
      assert.is_false(utils.is_local_network('8.8.8.8'))
      assert.is_false(utils.is_local_network('google.com'))
      assert.is_false(utils.is_local_network('github.com'))
    end)
  end)
  
  describe('parse_file_path', function()
    it('should parse simple paths', function()
      local parsed = utils.parse_file_path('test.md')
      assert.are.equal('test.md', parsed.path)
      assert.is_nil(parsed.line)
      assert.is_nil(parsed.anchor)
    end)
    
    it('should parse paths with line numbers', function()
      local parsed = utils.parse_file_path('test.md:30')
      assert.are.equal('test.md', parsed.path)
      assert.are.equal(30, parsed.line)
      assert.is_nil(parsed.anchor)
    end)
    
    it('should parse paths with anchors', function()
      local parsed = utils.parse_file_path('test.md#heading')
      assert.are.equal('test.md', parsed.path)
      assert.is_nil(parsed.line)
      assert.are.equal('heading', parsed.anchor)
    end)
    
    it('should identify URLs', function()
      local parsed = utils.parse_file_path('https://example.com')
      assert.are.equal('https://example.com', parsed.path)
      assert.are.equal('https', parsed.scheme)
    end)
  end)
  
  describe('title_to_anchor', function()
    it('should convert titles to GitHub-style anchors', function()
      assert.are.equal('hello-world', utils.title_to_anchor('Hello World'))
      assert.are.equal('test-heading', utils.title_to_anchor('Test Heading!'))
      assert.are.equal('with-special-chars', utils.title_to_anchor('With (Special) Chars?'))
    end)
    
    it('should handle empty and nil inputs', function()
      assert.are.equal('', utils.title_to_anchor(''))
      assert.are.equal('', utils.title_to_anchor(nil))
    end)
  end)
end)